name: Action-Test

run-name: "Action-Test - [${{ github.event.pull_request.title }} #${{ github.event.pull_request.number }}] by @${{ github.actor }}"

on:
  workflow_dispatch:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  ActionTest1Simple:
    name: Action-Test - [1-Simple]
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ steps.action-test.outcome }}
      conclusion: ${{ steps.action-test.conclusion }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test [1-Simple]
        uses: ./
        id: action-test
        with:
          WorkingDirectory: tests/1-Simple

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Outcome: ${{ steps.action-test.outcome }}"
          Write-Host "Conclusion: ${{ steps.action-test.conclusion }}"

  ActionTest1SimpleFailure:
    name: Action-Test - [1-Simple-Failure]
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ steps.action-test.outcome }}
      conclusion: ${{ steps.action-test.conclusion }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test [1-Simple-Failure]
        uses: ./
        id: action-test
        continue-on-error: true
        with:
          Path: tests/1-Simple-Failure

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Outcome: ${{ steps.action-test.outcome }}"
          Write-Host "Conclusion: ${{ steps.action-test.conclusion }}"

  ActionTest2Standard:
    name: Action-Test - [2-Standard]
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ steps.action-test.outcome }}
      conclusion: ${{ steps.action-test.conclusion }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test [2-Standard]
        uses: ./
        id: action-test
        with:
          Path: tests/2-Standard
          Output_CIFormat: GithubActions

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Outcome: ${{ steps.action-test.outcome }}"
          Write-Host "Conclusion: ${{ steps.action-test.conclusion }}"

  ActionTest3Advanced:
    name: Action-Test - [3-Advanced]
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ steps.action-test.outcome }}
      conclusion: ${{ steps.action-test.conclusion }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test [3-Advanced]
        uses: ./
        id: action-test
        with:
          Path: tests/3-Advanced/Pester.Configuration.ps1

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Outcome: ${{ steps.action-test.outcome }}"
          Write-Host "Conclusion: ${{ steps.action-test.conclusion }}"

  CatchJob:
    name: "Catch Job - Aggregate Status"
    needs:
      - ActionTest1Simple
      - ActionTest1SimpleFailure
      - ActionTest2Standard
      - ActionTest3Advanced
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Display Aggregated Results as a Table
        uses: PSModule/Github-Script@v1
        with:
          Script: |
            Install-PSResource -Name Markdown -Repository PSGallery -TrustRepository

            # Build an array of objects for each job
            $ActionTest1SimpleOutcome = "${{ needs.ActionTest1Simple.outputs.outcome }}"
            $ActionTest1SimpleExpectedOutcome = "success"
            $ActionTest1SimpleOutcomeResult = $ActionTest1SimpleOutcome -eq $ActionTest1SimpleExpectedOutcome
            $ActionTest1SimpleConclusion = "${{ needs.ActionTest1Simple.outputs.conclusion }}"
            $ActionTest1SimpleExpectedConclusion = "success"
            $ActionTest1SimpleConclusionResult = $ActionTest1SimpleConclusion -eq $ActionTest1SimpleExpectedConclusion
            $ActionTest1SimpleFailureOutcome = "${{ needs.ActionTest1SimpleFailure.outputs.outcome }}"
            $ActionTest1SimpleFailureExpectedOutcome = "failure"
            $ActionTest1SimpleFailureOutcomeResult = $ActionTest1SimpleFailureOutcome -eq $ActionTest1SimpleFailureExpectedOutcome
            $ActionTest1SimpleFailureConclusion = "${{ needs.ActionTest1SimpleFailure.outputs.conclusion }}"
            $ActionTest1SimpleFailureExpectedConclusion = "success"
            $ActionTest1SimpleFailureConclusionResult = $ActionTest1SimpleFailureConclusion -eq $ActionTest1SimpleFailureExpectedConclusion
            $ActionTest2StandardOutcome = "${{ needs.ActionTest2Standard.outputs.outcome }}"
            $ActionTest2StandardExpectedOutcome = "success"
            $ActionTest2StandardOutcomeResult = $ActionTest2StandardOutcome -eq $ActionTest2StandardExpectedOutcome
            $ActionTest2StandardConclusion = "${{ needs.ActionTest2Standard.outputs.conclusion }}"
            $ActionTest2StandardExpectedConclusion = "success"
            $ActionTest2StandardConclusionResult = $ActionTest2StandardConclusion -eq $ActionTest2StandardExpectedConclusion
            $ActionTest3AdvancedOutcome = "${{ needs.ActionTest3Advanced.outputs.outcome }}"
            $ActionTest3AdvancedExpectedOutcome = "success"
            $ActionTest3AdvancedOutcomeResult = $ActionTest3AdvancedOutcome -eq $ActionTest3AdvancedExpectedOutcome
            $ActionTest3AdvancedConclusion = "${{ needs.ActionTest3Advanced.outputs.conclusion }}"
            $ActionTest3AdvancedExpectedConclusion = "success"
            $ActionTest3AdvancedConclusionResult = $ActionTest3AdvancedConclusion -eq $ActionTest3AdvancedExpectedConclusion

            $jobs = @(
              [PSCustomObject]@{
                Name               = "Action-Test - [1-Simple]"
                Outcome            = $ActionTest1SimpleOutcome
                ExpectedOutcome    = $ActionTest1SimpleExpectedOutcome
                PassedOutcome      = $ActionTest1SimpleOutcomeResult
                Conclusion         = $ActionTest1SimpleConclusion
                ExpectedConclusion = $ActionTest1SimpleExpectedConclusion
                PassedConclusion   = $ActionTest1SimpleConclusionResult
              },
              [PSCustomObject]@{
                Name               = "Action-Test - [1-Simple-Failure]"
                Outcome            = $ActionTest1SimpleFailureOutcome
                ExpectedOutcome    = $ActionTest1SimpleFailureExpectedOutcome
                PassedOutcome      = $ActionTest1SimpleFailureOutcomeResult
                Conclusion         = $ActionTest1SimpleFailureConclusion
                ExpectedConclusion = $ActionTest1SimpleFailureExpectedConclusion
                PassedConclusion   = $ActionTest1SimpleFailureConclusionResult
              },
              [PSCustomObject]@{
                Name               = "Action-Test - [2-Standard]"
                Outcome            = $ActionTest2StandardOutcome
                ExpectedOutcome    = $ActionTest2StandardExpectedOutcome
                PassedOutcome      = $ActionTest2StandardOutcomeResult
                Conclusion         = $ActionTest2StandardConclusion
                ExpectedConclusion = $ActionTest2StandardExpectedConclusion
                PassedConclusion   = $ActionTest2StandardConclusionResult
              },
              [PSCustomObject]@{
                Name               = "Action-Test - [3-Advanced]"
                Outcome            = $ActionTest3AdvancedOutcome
                ExpectedOutcome    = $ActionTest3AdvancedExpectedOutcome
                PassedOutcome      = $ActionTest3AdvancedOutcomeResult
                Conclusion         = $ActionTest3AdvancedConclusion
                ExpectedConclusion = $ActionTest3AdvancedExpectedConclusion
                PassedConclusion   = $ActionTest3AdvancedConclusionResult
              }
            )

            # Display the table in the workflow logs
            $jobs | Format-List

            $passed = $true
            $jobs | ForEach-Object {
              if (-not $_.PassedOutcome) {
                Write-Error "Job $($_.Name) failed with Outcome $($_.Outcome) and Expected Outcome $($_.ExpectedOutcome)"
                $passed = $false
              }

              if (-not $_.PassedConclusion) {
                Write-Error "Job $($_.Name) failed with Conclusion $($_.Conclusion) and Expected Conclusion $($_.ExpectedConclusion)"
                $passed = $false
              }
            }

            $icon = if ($passed) { '✅' } else { '❌' }
            $status = Heading 1 "$icon - GitHub Actions Status" {
                Table {
                    $jobs
                }
            }

            Set-GitHubStepSummary -Summary $status

            if (-not $passed) {
              Write-GithubError "One or more jobs failed"
              exit 1
            }
