name: Action-Test

run-name: "Action-Test - [${{ github.event.pull_request.title }} #${{ github.event.pull_request.number }}] by @${{ github.actor }}"

on:
  workflow_dispatch:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  ActionTest1Simple:
    name: Action-Test - [1-Simple]
    runs-on: ubuntu-latest
    outputs:
      Outcome: ${{ steps.action-test.outcome }}
      Conclusion: ${{ steps.action-test.conclusion }}
      TestResults: ${{ steps.action-test.outputs.TestResults }}

    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test [1-Simple]
        uses: ./
        id: action-test
        with:
          WorkingDirectory: tests/1-Simple

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Outcome: ${{ steps.action-test.outcome }}"
          Write-Host "Conclusion: ${{ steps.action-test.conclusion }}"

  ActionTest1SimpleFailure:
    name: Action-Test - [1-Simple-Failure]
    runs-on: ubuntu-latest
    outputs:
      Outcome: ${{ steps.action-test.outcome }}
      Conclusion: ${{ steps.action-test.conclusion }}
      TestResults: ${{ steps.action-test.outputs.TestResults }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test [1-Simple-Failure]
        uses: ./
        id: action-test
        continue-on-error: true
        with:
          WorkingDirectory: tests/1-Simple-Failure

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Outcome: ${{ steps.action-test.outcome }}"
          Write-Host "Conclusion: ${{ steps.action-test.conclusion }}"

  ActionTest1SimpleExecutionFailure:
    name: Action-Test - [1-Simple-ExecutionFailure]
    runs-on: ubuntu-latest
    outputs:
      Outcome: ${{ steps.action-test.outcome }}
      Conclusion: ${{ steps.action-test.conclusion }}
      TestResults: ${{ steps.action-test.outputs.TestResults }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test [1-Simple-ExecutionFailure]
        uses: ./
        id: action-test
        continue-on-error: true
        with:
          WorkingDirectory: tests/1-Simple-ExecutionFailure

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Outcome: ${{ steps.action-test.outcome }}"
          Write-Host "Conclusion: ${{ steps.action-test.conclusion }}"

  ActionTest2Standard:
    name: Action-Test - [2-Standard]
    runs-on: ubuntu-latest
    outputs:
      Outcome: ${{ steps.action-test.outcome }}
      Conclusion: ${{ steps.action-test.conclusion }}
      TestResults: ${{ steps.action-test.outputs.TestResults }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test [2-Standard]
        uses: ./
        id: action-test
        with:
          WorkingDirectory: tests/2-Standard
          Output_CIFormat: GithubActions

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Outcome: ${{ steps.action-test.outcome }}"
          Write-Host "Conclusion: ${{ steps.action-test.conclusion }}"

  ActionTest3Advanced:
    name: Action-Test - [3-Advanced]
    runs-on: ubuntu-latest
    outputs:
      Outcome: ${{ steps.action-test.outcome }}
      Conclusion: ${{ steps.action-test.conclusion }}
      TestResults: ${{ steps.action-test.outputs.TestResults }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test [3-Advanced]
        uses: ./
        id: action-test
        with:
          Path: Pester.Configuration.ps1
          WorkingDirectory: tests/3-Advanced

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Outcome: ${{ steps.action-test.outcome }}"
          Write-Host "Conclusion: ${{ steps.action-test.conclusion }}"

  CatchJob:
    name: "Catch Job - Aggregate Status"
    needs:
      - ActionTest1Simple
      - ActionTest1SimpleFailure
      - ActionTest1SimpleExecutionFailure
      - ActionTest2Standard
      - ActionTest3Advanced
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Display Aggregated Results as a Table
        uses: PSModule/Github-Script@v1
        with:
          Script: |
            Install-PSResource -Name Markdown -Repository PSGallery -TrustRepository

            # Build an array of objects for each job
            $ActionTest1SimpleOutcome = "${{ needs.ActionTest1Simple.outputs.outcome }}"
            $ActionTest1SimpleExpectedOutcome = "success"
            $ActionTest1SimpleOutcomeResult = $ActionTest1SimpleOutcome -eq $ActionTest1SimpleExpectedOutcome
            $ActionTest1SimpleConclusion = "${{ needs.ActionTest1Simple.outputs.conclusion }}"
            $ActionTest1SimpleExpectedConclusion = "success"
            $ActionTest1SimpleConclusionResult = $ActionTest1SimpleConclusion -eq $ActionTest1SimpleExpectedConclusion

            $ActionTest1SimpleTestResults = "${{ needs.ActionTest1Simple.outputs.TestResults }}"
            $ActionTest1SimpleExecuted = -not [string]::IsNullOrEmpty($ActionTest1SimpleTestResults)
            $ActionTest1SimpleTestsPassed = $false
            if ($ActionTest1SimpleExecuted) {
              try {
                $testData = $ActionTest1SimpleTestResults | ConvertFrom-Json
                $ActionTest1SimpleTestsPassed = $testData.FailedCount -eq 0
              } catch {
                Write-Warning "Failed to parse ActionTest1Simple test results: $_"
              }
            }

            $ActionTest1SimpleExpectedExecuted = $true
            $ActionTest1SimplePassedExecuted = $ActionTest1SimpleExecuted -eq $ActionTest1SimpleExpectedExecuted
            $ActionTest1SimpleExpectedPassed = $true
            $ActionTest1SimplePassedPassed = $ActionTest1SimpleTestsPassed -eq $ActionTest1SimpleExpectedPassed

            $ActionTest1SimpleFailureOutcome = "${{ needs.ActionTest1SimpleFailure.outputs.outcome }}"
            $ActionTest1SimpleFailureExpectedOutcome = "failure"
            $ActionTest1SimpleFailureOutcomeResult = $ActionTest1SimpleFailureOutcome -eq $ActionTest1SimpleFailureExpectedOutcome
            $ActionTest1SimpleFailureConclusion = "${{ needs.ActionTest1SimpleFailure.outputs.conclusion }}"
            $ActionTest1SimpleFailureExpectedConclusion = "success"
            $ActionTest1SimpleFailureConclusionResult = $ActionTest1SimpleFailureConclusion -eq $ActionTest1SimpleFailureExpectedConclusion

            $ActionTest1SimpleFailureTestResults = "${{ needs.ActionTest1SimpleFailure.outputs.TestResults }}"
            $ActionTest1SimpleFailureExecuted = -not [string]::IsNullOrEmpty($ActionTest1SimpleFailureTestResults)
            $ActionTest1SimpleFailureTestsPassed = $false
            if ($ActionTest1SimpleFailureExecuted) {
              try {
                $testData = $ActionTest1SimpleFailureTestResults | ConvertFrom-Json
                # This one is expected to fail, so invert the logic
                $ActionTest1SimpleFailureTestsPassed = $testData.FailedCount -gt 0
              } catch {
                Write-Warning "Failed to parse ActionTest1SimpleFailure test results: $_"
              }
            }

            $ActionTest1SimpleFailureExpectedExecuted = $true
            $ActionTest1SimpleFailurePassedExecuted = $ActionTest1SimpleFailureExecuted -eq $ActionTest1SimpleFailureExpectedExecuted
            $ActionTest1SimpleFailureExpectedPassed = $true
            $ActionTest1SimpleFailurePassedPassed = $ActionTest1SimpleFailureTestsPassed -eq $ActionTest1SimpleFailureExpectedPassed

            $ActionTest1SimpleExecutionFailureOutcome = "${{ needs.ActionTest1SimpleExecutionFailure.outputs.outcome }}"
            $ActionTest1SimpleExecutionFailureExpectedOutcome = "failure"
            $ActionTest1SimpleExecutionFailureOutcomeResult = $ActionTest1SimpleExecutionFailureOutcome -eq $ActionTest1SimpleExecutionFailureExpectedOutcome
            $ActionTest1SimpleExecutionFailureConclusion = "${{ needs.ActionTest1SimpleExecutionFailure.outputs.conclusion }}"
            $ActionTest1SimpleExecutionFailureExpectedConclusion = "success"
            $ActionTest1SimpleExecutionFailureConclusionResult = $ActionTest1SimpleExecutionFailureConclusion -eq $ActionTest1SimpleExecutionFailureExpectedConclusion

            $ActionTest1SimpleExecutionFailureTestResults = "${{ needs.ActionTest1SimpleExecutionFailure.outputs.TestResults }}"
            $ActionTest1SimpleExecutionFailureExecuted = -not [string]::IsNullOrEmpty($ActionTest1SimpleExecutionFailureTestResults)
            # For execution failure, we don't expect valid test results
            $ActionTest1SimpleExecutionFailureTestsPassed = $true

            $ActionTest1SimpleExecutionFailureExpectedExecuted = $true
            $ActionTest1SimpleExecutionFailurePassedExecuted = $ActionTest1SimpleExecutionFailureExecuted -eq $ActionTest1SimpleExecutionFailureExpectedExecuted
            $ActionTest1SimpleExecutionFailureExpectedPassed = $true
            $ActionTest1SimpleExecutionFailurePassedPassed = $ActionTest1SimpleExecutionFailureTestsPassed -eq $ActionTest1SimpleExecutionFailureExpectedPassed

            $ActionTest2StandardOutcome = "${{ needs.ActionTest2Standard.outputs.outcome }}"
            $ActionTest2StandardExpectedOutcome = "success"
            $ActionTest2StandardOutcomeResult = $ActionTest2StandardOutcome -eq $ActionTest2StandardExpectedOutcome
            $ActionTest2StandardConclusion = "${{ needs.ActionTest2Standard.outputs.conclusion }}"
            $ActionTest2StandardExpectedConclusion = "success"
            $ActionTest2StandardConclusionResult = $ActionTest2StandardConclusion -eq $ActionTest2StandardExpectedConclusion

            $ActionTest2StandardTestResults = "${{ needs.ActionTest2Standard.outputs.TestResults }}"
            $ActionTest2StandardExecuted = -not [string]::IsNullOrEmpty($ActionTest2StandardTestResults)
            $ActionTest2StandardTestsPassed = $false
            if ($ActionTest2StandardExecuted) {
              try {
                $testData = $ActionTest2StandardTestResults | ConvertFrom-Json
                $ActionTest2StandardTestsPassed = $testData.FailedCount -eq 0
              } catch {
                Write-Warning "Failed to parse ActionTest2Standard test results: $_"
              }
            }

            $ActionTest2StandardExpectedExecuted = $true
            $ActionTest2StandardPassedExecuted = $ActionTest2StandardExecuted -eq $ActionTest2StandardExpectedExecuted
            $ActionTest2StandardExpectedPassed = $true
            $ActionTest2StandardPassedPassed = $ActionTest2StandardTestsPassed -eq $ActionTest2StandardExpectedPassed

            $ActionTest3AdvancedOutcome = "${{ needs.ActionTest3Advanced.outputs.outcome }}"
            $ActionTest3AdvancedExpectedOutcome = "success"
            $ActionTest3AdvancedOutcomeResult = $ActionTest3AdvancedOutcome -eq $ActionTest3AdvancedExpectedOutcome
            $ActionTest3AdvancedConclusion = "${{ needs.ActionTest3Advanced.outputs.conclusion }}"
            $ActionTest3AdvancedExpectedConclusion = "success"
            $ActionTest3AdvancedConclusionResult = $ActionTest3AdvancedConclusion -eq $ActionTest3AdvancedExpectedConclusion

            $ActionTest3AdvancedTestResults = "${{ needs.ActionTest3Advanced.outputs.TestResults }}"
            $ActionTest3AdvancedExecuted = -not [string]::IsNullOrEmpty($ActionTest3AdvancedTestResults)
            $ActionTest3AdvancedTestsPassed = $false
            if ($ActionTest3AdvancedExecuted) {
              try {
                $testData = $ActionTest3AdvancedTestResults | ConvertFrom-Json
                $ActionTest3AdvancedTestsPassed = $testData.FailedCount -eq 0
              } catch {
                Write-Warning "Failed to parse ActionTest3Advanced test results: $_"
              }
            }

            $ActionTest3AdvancedExpectedExecuted = $true
            $ActionTest3AdvancedPassedExecuted = $ActionTest3AdvancedExecuted -eq $ActionTest3AdvancedExpectedExecuted
            $ActionTest3AdvancedExpectedPassed = $true
            $ActionTest3AdvancedPassedPassed = $ActionTest3AdvancedTestsPassed -eq $ActionTest3AdvancedExpectedPassed

            $jobs = @(
              [PSCustomObject]@{
                Name               = "Action-Test - [1-Simple]"
                Outcome            = $ActionTest1SimpleOutcome
                ExpectedOutcome    = $ActionTest1SimpleExpectedOutcome
                PassedOutcome      = $ActionTest1SimpleOutcomeResult
                Conclusion         = $ActionTest1SimpleConclusion
                ExpectedConclusion = $ActionTest1SimpleExpectedConclusion
                PassedConclusion   = $ActionTest1SimpleConclusionResult
                Executed           = $ActionTest1SimpleExecuted
                ExpectedExecuted   = $ActionTest1SimpleExpectedExecuted
                PassedExecuted     = $ActionTest1SimplePassedExecuted
                Passed             = $ActionTest1SimpleTestsPassed
                ExpectedPassed     = $ActionTest1SimpleExpectedPassed
                PassedPassed       = $ActionTest1SimplePassedPassed
              },
              [PSCustomObject]@{
                Name               = "Action-Test - [1-Simple-Failure]"
                Outcome            = $ActionTest1SimpleFailureOutcome
                ExpectedOutcome    = $ActionTest1SimpleFailureExpectedOutcome
                PassedOutcome      = $ActionTest1SimpleFailureOutcomeResult
                Conclusion         = $ActionTest1SimpleFailureConclusion
                ExpectedConclusion = $ActionTest1SimpleFailureExpectedConclusion
                PassedConclusion   = $ActionTest1SimpleFailureConclusionResult
                Executed           = $ActionTest1SimpleFailureExecuted
                ExpectedExecuted   = $ActionTest1SimpleFailureExpectedExecuted
                PassedExecuted     = $ActionTest1SimpleFailurePassedExecuted
                Passed             = $ActionTest1SimpleFailureTestsPassed
                ExpectedPassed     = $ActionTest1SimpleFailureExpectedPassed
                PassedPassed       = $ActionTest1SimpleFailurePassedPassed
              },
              [PSCustomObject]@{
                Name               = "Action-Test - [1-Simple-ExecutionFailure]"
                Outcome            = $ActionTest1SimpleExecutionFailureOutcome
                ExpectedOutcome    = $ActionTest1SimpleExecutionFailureExpectedOutcome
                PassedOutcome      = $ActionTest1SimpleExecutionFailureOutcomeResult
                Conclusion         = $ActionTest1SimpleExecutionFailureConclusion
                ExpectedConclusion = $ActionTest1SimpleExecutionFailureExpectedConclusion
                PassedConclusion   = $ActionTest1SimpleExecutionFailureConclusionResult
                Executed           = $ActionTest1SimpleExecutionFailureExecuted
                ExpectedExecuted   = $ActionTest1SimpleExecutionFailureExpectedExecuted
                PassedExecuted     = $ActionTest1SimpleExecutionFailurePassedExecuted
                Passed             = $ActionTest1SimpleExecutionFailureTestsPassed
                ExpectedPassed     = $ActionTest1SimpleExecutionFailureExpectedPassed
                PassedPassed       = $ActionTest1SimpleExecutionFailurePassedPassed
              },
              [PSCustomObject]@{
                Name               = "Action-Test - [2-Standard]"
                Outcome            = $ActionTest2StandardOutcome
                ExpectedOutcome    = $ActionTest2StandardExpectedOutcome
                PassedOutcome      = $ActionTest2StandardOutcomeResult
                Conclusion         = $ActionTest2StandardConclusion
                ExpectedConclusion = $ActionTest2StandardExpectedConclusion
                PassedConclusion   = $ActionTest2StandardConclusionResult
                Executed           = $ActionTest2StandardExecuted
                ExpectedExecuted   = $ActionTest2StandardExpectedExecuted
                PassedExecuted     = $ActionTest2StandardPassedExecuted
                Passed             = $ActionTest2StandardTestsPassed
                ExpectedPassed     = $ActionTest2StandardExpectedPassed
                PassedPassed       = $ActionTest2StandardPassedPassed
              },
              [PSCustomObject]@{
                Name               = "Action-Test - [3-Advanced]"
                Outcome            = $ActionTest3AdvancedOutcome
                ExpectedOutcome    = $ActionTest3AdvancedExpectedOutcome
                PassedOutcome      = $ActionTest3AdvancedOutcomeResult
                Conclusion         = $ActionTest3AdvancedConclusion
                ExpectedConclusion = $ActionTest3AdvancedExpectedConclusion
                PassedConclusion   = $ActionTest3AdvancedConclusionResult
                Executed           = $ActionTest3AdvancedExecuted
                ExpectedExecuted   = $ActionTest3AdvancedExpectedExecuted
                PassedExecuted     = $ActionTest3AdvancedPassedExecuted
                Passed             = $ActionTest3AdvancedTestsPassed
                ExpectedPassed     = $ActionTest3AdvancedExpectedPassed
                PassedPassed       = $ActionTest3AdvancedPassedPassed
              }
            )

            # Display the table in the workflow logs
            $jobs | Format-Table -AutoSize | Out-String

            $passed = $true
            $jobs | ForEach-Object {
              if (-not $_.PassedOutcome) {
                Write-Error "Job $($_.Name) failed with Outcome $($_.Outcome) and Expected Outcome $($_.ExpectedOutcome)"
                $passed = $false
              }

              if (-not $_.PassedConclusion) {
                Write-Error "Job $($_.Name) failed with Conclusion $($_.Conclusion) and Expected Conclusion $($_.ExpectedConclusion)"
                $passed = $false
              }

              if (-not $_.PassedExecuted) {
                Write-Error "Job $($_.Name) not executed as expected. (Actual: $($_.Executed), Expected: $($_.ExpectedExecuted))"
                $passed = $false
              }

              if (-not $_.PassedPassed) {
                Write-Error "Job $($_.Name) tests did not pass as expected. (Actual: $($_.Passed), Expected: $($_.ExpectedPassed))"
                $passed = $false
              }
            }

            $icon = if ($passed) { '✅' } else { '❌' }
            $status = Heading 1 "$icon - GitHub Actions Status" {
                Table {
                    $jobs
                }
            }

            Set-GitHubStepSummary -Summary $status

            if (-not $passed) {
              Write-GithubError "One or more jobs failed"
              exit 1
            }
